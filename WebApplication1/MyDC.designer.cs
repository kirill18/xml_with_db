#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DBSalary")]
	public partial class MyDCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertPeople(People instance);
    partial void UpdatePeople(People instance);
    partial void DeletePeople(People instance);
    partial void InsertPeoplesSalary(PeoplesSalary instance);
    partial void UpdatePeoplesSalary(PeoplesSalary instance);
    partial void DeletePeoplesSalary(PeoplesSalary instance);
    #endregion
		
		public MyDCDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DBSalaryConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyDCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<People> People
		{
			get
			{
				return this.GetTable<People>();
			}
		}
		
		public System.Data.Linq.Table<PeoplesSalary> PeoplesSalary
		{
			get
			{
				return this.GetTable<PeoplesSalary>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.People")]
	public partial class People : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FIO;
		
		private System.DateTime _SalaryDate;
		
		private int _IdSalary;
		
		private EntityRef<PeoplesSalary> _PeoplesSalary;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFIOChanging(string value);
    partial void OnFIOChanged();
    partial void OnSalaryDateChanging(System.DateTime value);
    partial void OnSalaryDateChanged();
    partial void OnIdSalaryChanging(int value);
    partial void OnIdSalaryChanged();
    #endregion
		
		public People()
		{
			this._PeoplesSalary = default(EntityRef<PeoplesSalary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIO", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string FIO
		{
			get
			{
				return this._FIO;
			}
			set
			{
				if ((this._FIO != value))
				{
					this.OnFIOChanging(value);
					this.SendPropertyChanging();
					this._FIO = value;
					this.SendPropertyChanged("FIO");
					this.OnFIOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryDate", DbType="Date NOT NULL")]
		public System.DateTime SalaryDate
		{
			get
			{
				return this._SalaryDate;
			}
			set
			{
				if ((this._SalaryDate != value))
				{
					this.OnSalaryDateChanging(value);
					this.SendPropertyChanging();
					this._SalaryDate = value;
					this.SendPropertyChanged("SalaryDate");
					this.OnSalaryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSalary", DbType="Int NOT NULL")]
		public int IdSalary
		{
			get
			{
				return this._IdSalary;
			}
			set
			{
				if ((this._IdSalary != value))
				{
					if (this._PeoplesSalary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSalaryChanging(value);
					this.SendPropertyChanging();
					this._IdSalary = value;
					this.SendPropertyChanged("IdSalary");
					this.OnIdSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PeoplesSalary_People", Storage="_PeoplesSalary", ThisKey="IdSalary", OtherKey="Id", IsForeignKey=true)]
		public PeoplesSalary PeoplesSalary
		{
			get
			{
				return this._PeoplesSalary.Entity;
			}
			set
			{
				PeoplesSalary previousValue = this._PeoplesSalary.Entity;
				if (((previousValue != value) 
							|| (this._PeoplesSalary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PeoplesSalary.Entity = null;
						previousValue.People.Remove(this);
					}
					this._PeoplesSalary.Entity = value;
					if ((value != null))
					{
						value.People.Add(this);
						this._IdSalary = value.Id;
					}
					else
					{
						this._IdSalary = default(int);
					}
					this.SendPropertyChanged("PeoplesSalary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PeoplesSalary")]
	public partial class PeoplesSalary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private float _Salary;
		
		private EntitySet<People> _People;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSalaryChanging(float value);
    partial void OnSalaryChanged();
    #endregion
		
		public PeoplesSalary()
		{
			this._People = new EntitySet<People>(new Action<People>(this.attach_People), new Action<People>(this.detach_People));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Real NOT NULL")]
		public float Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PeoplesSalary_People", Storage="_People", ThisKey="Id", OtherKey="IdSalary")]
		public EntitySet<People> People
		{
			get
			{
				return this._People;
			}
			set
			{
				this._People.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_People(People entity)
		{
			this.SendPropertyChanging();
			entity.PeoplesSalary = this;
		}
		
		private void detach_People(People entity)
		{
			this.SendPropertyChanging();
			entity.PeoplesSalary = null;
		}
	}
}
#pragma warning restore 1591
